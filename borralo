def generateAssFile(clip: Clip, linelevel_subtitles: list[Line]):
    theme = clip.theme

    assText = f"""[Script Info]
Title: {clip.name}
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1080
PlayResY: 1920

[Aegisub Project Garbage]
Last Style Storage: Styles
Video AR Mode: 4
Video AR Value: 0.561111
Video Zoom Percent: 0.250000
Video Position: 178

[V4+ Styles]
"""
    style = {
        "Name": "Style",
        "Fontname": fonts[theme.themeFont],
        "Fontsize": theme.themeSize * 5,
        "PrimaryColour": f"&H00{theme.themeFontColor.replace('#', '')}",
        "SecondaryColour": f"&H00{theme.themeMainColor.replace('#', '')}",
        "OutlineColour": f"&H00{theme.themeStrokeColor.replace('#', '')}",
        "BackColour": f"&H00{theme.themeFontColor.replace('#', '')}",
        "Bold": 0,
        "Italic": 0,
        "Underline": 0,
        "StrikeOut": 0,
        "ScaleX": 100,
        "ScaleY": 100,
        "Spacing": 0,
        "Angle": 0,
        "BorderStyle": 1,
        "Outline": strokeStyle(theme),
        "Shadow": 0,
        "Alignment": 8, #8 is top center
        "MarginL": 10,
        "MarginR": 10,
        "MarginV": 10,
        "Encoding": 1,
    }

    assText += f"Format: {", ".join([str(x) for x in list(style.keys())])}\n"
    assText += f"Style: {",".join([str(x) for x in list(style.values())])}\n"

    assText += "[Events]\n"
    assText += "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"

    start = linelevel_subtitles[0]["start"]
    for line in linelevel_subtitles:
        subtitle = f"Dialogue: 0,"
        subtitle += f"{time_str(line['start'] - start)},{time_str(line['end'] - start)}"
        subtitle += f",{style["Name"]},,0,0,0,,"

        subtitle += "{"
        subtitle += f"{positionFilter(theme)}"
        subtitle += "}"

        for word in line["words"]:
            diff = str(word["end"] - word["start"])
            diff = diff if len(diff) == 3 else "0" + diff
            length = str(int(diff[0:2]))

            text = word["word"]
            if theme.themeUpperText:
                text = text.upper()

            # subtitle += "{\\K" + length + "}" + text + " "
            subtitle += f"{text} "

        assText += subtitle + "\n"

    return assText


def strokeStyle(theme: Theme):
    stroke = theme.themeStroke

    if stroke == ThemeStroke.NONE:
        return "0"
    elif stroke == ThemeStroke.SMALL:
        return 10
    elif stroke == ThemeStroke.MEDIUM:
        return 15
    elif stroke == ThemeStroke.LARGE:
        return 20

    return "0"


def positionFilter(theme: Theme):
    position = theme.themePosition

    return f"\\pos({str(550)},{str(1920 * position/100)})"
