import os
import subprocess

from extractInterventions import Line, extractLines
from clip.Clip import Clip

from moviepy.editor import (
    TextClip,
    CompositeVideoClip,
    ColorClip,
    VideoFileClip,
)
import numpy as np

from extractWordsFromFile import Word

def addSubtitlestoClip(path: str, clip: Clip, words: list[Word]):
    fontPath = os.environ["FONTS_PATH"]
    lines = extractLines(words)

    # Extract the ones that are in the clip. We multiply by 1000 to compare in millis
    linelevel_subtitles: list[Line] = []
    for line in lines:
        if (
            line["start"] >= clip.range.start * 1000
            and line["end"] <= clip.range.end * 1000
        ):
            linelevel_subtitles.append(line)

    assText = """[Script Info]
; Script generated by Bluesun
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1080
PlayResY: 1920

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Superpuest main,Komika Axis,110,&H00FFFFFF,&H00FFFFFF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,10,0,5,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
"""

    start = linelevel_subtitles[0]["start"]
    for line in linelevel_subtitles:
        subtitle = f"Dialogue: 0,{time_str(line['start'] - start)},{time_str(line['end'] - start)},Superpuest main,,0,0,0,,"
        subtitle += "{\\fade(200,200)\\blur5} "

        for word in line["words"]:
            diff = str(word["end"] - word["start"])
            diff = diff if len(diff) == 3 else "0" + diff
            length = str(int(diff[0:2]))

            # subtitle += "{\\K" + length + "}" + word["word"] + " "
            subtitle += word["word"] + " "

        assText += subtitle + "\n"

    with open(f"{path}/{clip.sourceId}/{clip.id}.ass", "w") as file:
        file.write(assText)

    try:
        os.unlink(f"{path}/{clip.sourceId}/{clip.id}_temp.mp4")
    except:
        print(f"File: {path}/{clip.sourceId}/{clip.id}_temp.mp4 don't exist")

    arguments = [
        "ffmpeg",
        "-i",
        f"{path}/{clip.sourceId}/{clip.id}.mp4",
        "-vf",
        f"ass={path}/{clip.sourceId}/{clip.id}.ass:fontsdir={fontPath}",
        f"{path}/{clip.sourceId}/{clip.id}_temp.mp4",
    ]
    print("arguments", " ".join(arguments))

    result = subprocess.run(arguments, capture_output=True, text=True)
    result.stdout

    if result.returncode != 0:
        print("Error", result.stderr)
        raise Exception("Error adding subtitles", result.stderr)

    # Remove the original video and rename the new one
    os.unlink(f"{path}/{clip.sourceId}/{clip.id}.mp4")
    os.rename(
        f"{path}/{clip.sourceId}/{clip.id}_temp.mp4",
        f"{path}/{clip.sourceId}/{clip.id}.mp4",
    )


def time_str(millis: int):
    if not millis:
        return "00:00:00.0"

    hours = int(millis / (3600 * 1000))
    minutes = int((millis % (3600 * 1000)) / (60 * 1000))
    seconds = int((millis % (3600 * 1000)) % (60 * 1000) / 1000)
    millis = millis - seconds * 1000

    hoursStr = f"0{hours}:" if hours < 10 else f"{hours}:"
    minutesStr = f"0{minutes}:" if minutes < 10 else f"{minutes}:"
    secondsStr = f"0{seconds}" if seconds < 10 else f"{seconds}"
    millisStr = f".0{millis}" if millis < 10 else f".{str(millis)[0:2]}"

    return f"{hoursStr}{minutesStr}{secondsStr}{millisStr}"


def useMoviepy(path: str, clip: Clip, linelevel_subtitles: list):
    input_video = VideoFileClip(f"{path}/{clip.sourceId}/{clip.id}.mp4", "rb")
    frame_size = input_video.size

    print(len(linelevel_subtitles), frame_size, input_video.duration)
    all_linelevel_splits = []

    start = linelevel_subtitles[0]["start"]
    for line in linelevel_subtitles:
        out_clips, positions = create_caption(line, frame_size, start)

        max_width = 0
        max_height = 0

        for position in positions:
            # print (out_clip.pos)
            # break
            x_pos, y_pos = position["x_pos"], position["y_pos"]
            width, height = position["width"], position["height"]

            max_width = max(max_width, x_pos + width)
            max_height = max(max_height, y_pos + height)

        color_clip = ColorClip(
            size=(int(max_width * 1.1), int(max_height * 1.1)), color=(64, 64, 64)
        )
        color_clip = color_clip.set_opacity(0.6)
        color_clip = color_clip.set_start(line["start"] - start).set_duration(
            line["end"] - line["start"]
        )

        # centered_clips = [each.set_position('center') for each in out_clips]
        clip_to_overlay = CompositeVideoClip([color_clip] + out_clips)
        clip_to_overlay = clip_to_overlay.set_position("bottom")

        all_linelevel_splits.append(clip_to_overlay)

    print(len(all_linelevel_splits))
    # final_video = CompositeVideoClip([input_video] + all_linelevel_splits)
    final_video = CompositeVideoClip([input_video])

    # Set the audio of the final video to be the same as the input video
    final_video = final_video.set_audio(input_video.audio)

    # Save the final clip as a video file with the audio included
    final_video.write_videofile(
        f"{path}/{clip.sourceId}/{clip.id}_temp.mp4",
        fps=24,
        codec="libx264",
        audio_codec="aac",
    )

    # Remove the original video and rename the new one
    os.unlink(f"{path}/{clip.sourceId}/{clip.id}.mp4")
    os.rename(
        f"{path}/{clip.sourceId}/{clip.id}_temp.mp4",
        f"{path}/{clip.sourceId}/{clip.id}.mp4",
    )


def create_caption(
    line,
    framesize,
    start=0,
    font="Helvetica",
    color="white",
    highlight_color="yellow",
    stroke_color="black",
    stroke_width=1.5,
):
    wordcount = len(line["words"])
    full_duration = line["end"] - line["start"]

    word_clips = []
    xy_textclips_positions = []

    x_pos = 0
    y_pos = 0
    line_width = 0  # Total width of words in the current line
    frame_width = framesize[0]
    frame_height = framesize[1]

    x_buffer = frame_width * 1 / 10

    max_line_width = frame_width - 2 * (x_buffer)

    fontsize = int(frame_height * 0.075)  # 7.5 percent of video height

    space_width = ""
    space_height = ""

    for index, word in enumerate(line["words"]):
        duration = word["end"] - word["start"]
        word_clip = (
            TextClip(
                word["word"],
                font=font,
                fontsize=fontsize,
                color=color,
                stroke_color=stroke_color,
                stroke_width=stroke_width,
            )
            .set_start(line["start"] - start)
            .set_duration(full_duration)
        )
        word_clip_space = (
            TextClip(" ", font=font, fontsize=fontsize, color=color)
            .set_start(line["start"] - start)
            .set_duration(full_duration)
        )
        word_width, word_height = word_clip.size
        space_width, space_height = word_clip_space.size
        if line_width + word_width + space_width <= max_line_width:
            # Store info of each word_clip created
            xy_textclips_positions.append(
                {
                    "x_pos": x_pos,
                    "y_pos": y_pos,
                    "width": word_width,
                    "height": word_height,
                    "word": word["word"],
                    "start": word["start"] - start,
                    "end": word["end"] - start,
                    "duration": duration,
                }
            )

            word_clip = word_clip.set_position((x_pos, y_pos))
            word_clip_space = word_clip_space.set_position((x_pos + word_width, y_pos))

            x_pos = x_pos + word_width + space_width
            line_width = line_width + word_width + space_width
        else:
            # Move to the next line
            x_pos = 0
            y_pos = y_pos + word_height + 10
            line_width = word_width + space_width

            # Store info of each word_clip created
            xy_textclips_positions.append(
                {
                    "x_pos": x_pos,
                    "y_pos": y_pos,
                    "width": word_width,
                    "height": word_height,
                    "word": word["word"],
                    "start": word["start"] - start,
                    "end": word["end"] - start,
                    "duration": duration,
                }
            )

            word_clip = word_clip.set_position((x_pos, y_pos))
            word_clip_space = word_clip_space.set_position((x_pos + word_width, y_pos))
            x_pos = word_width + space_width

        word_clips.append(word_clip)
        word_clips.append(word_clip_space)

    for highlight_word in xy_textclips_positions:
        word_clip_highlight = (
            TextClip(
                highlight_word["word"],
                font=font,
                fontsize=fontsize,
                color=highlight_color,
                stroke_color=stroke_color,
                stroke_width=stroke_width,
            )
            .set_start(highlight_word["start"] - start)
            .set_duration(highlight_word["duration"])
        )
        word_clip_highlight = word_clip_highlight.set_position(
            (highlight_word["x_pos"], highlight_word["y_pos"])
        )
        word_clips.append(word_clip_highlight)

    return word_clips, xy_textclips_positions
